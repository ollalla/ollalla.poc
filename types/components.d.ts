/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { AppDefinition } from "./components/inversify.interfaces";
import { OverlayConfig, OverlayRef } from "./components/oec-overlay/Overlay.types";
export namespace Components {
    interface OecAppCard {
        "appDefinition": AppDefinition;
    }
    interface OecAppLauncher {
        "enabledApps": string[];
    }
    interface OecButton {
        /**
          * This value sets whether the button should be disabled or not
         */
        "disabled": boolean;
        /**
          * The type of button to display. Possible values are: primary, secondary, or tertiary
         */
        "type": string;
    }
    interface OecHeader {
        /**
          * The type of header to display. Possible values are 1-6
         */
        "level": number;
    }
    interface OecModal {
        /**
          * The size of modal to display. Possible values are small, medium, or large
         */
        "size": string;
        /**
          * The type of header to display. Possible values are modal or dialog
         */
        "type": string;
        /**
          * Toggle the visibility of the modal
         */
        "visible": boolean;
    }
    interface OecNav {
        "enabledApps": string[];
        "userId": string;
    }
    interface OecNavMenuAction {
        "badgeTotal": number;
        "isClickable": boolean;
    }
    interface OecNavSearch {
    }
    interface OecOverlayArrow {
        "overlayConfig": OverlayConfig;
    }
    interface OecOverlayBackdrop {
        "hide": () => Promise<void>;
        "isShowing": () => Promise<boolean>;
        "overlayConfig": OverlayConfig;
    }
    interface OecOverlayContainer {
        "addOverlay": (overlayConfig: OverlayConfig) => Promise<OverlayRef>;
        "removeOverlay": (ref: OverlayRef) => Promise<void>;
    }
    interface OecOverlayContent {
        "hide": () => Promise<void>;
        "overlayConfig": OverlayConfig;
    }
    interface OecOverlayItem {
        "getBackdropElement": () => Promise<HTMLOecOverlayBackdropElement>;
        "getPaneElement": () => Promise<HTMLOecOverlayPaneElement>;
        "hide": () => Promise<void>;
        "isShowing": () => Promise<boolean>;
        "overlayConfig": OverlayConfig;
        "show": () => Promise<void>;
    }
    interface OecOverlayPane {
        "getArrowElement": () => Promise<HTMLOecOverlayArrowElement>;
        "hide": () => Promise<void>;
        "overlayConfig": OverlayConfig;
    }
    interface OecUserIcon {
        "userId": string;
    }
}
export interface OecAppLauncherCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOecAppLauncherElement;
}
export interface OecModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOecModalElement;
}
export interface OecNavCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOecNavElement;
}
export interface OecNavSearchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOecNavSearchElement;
}
export interface OecOverlayItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOecOverlayItemElement;
}
declare global {
    interface HTMLOecAppCardElement extends Components.OecAppCard, HTMLStencilElement {
    }
    var HTMLOecAppCardElement: {
        prototype: HTMLOecAppCardElement;
        new (): HTMLOecAppCardElement;
    };
    interface HTMLOecAppLauncherElement extends Components.OecAppLauncher, HTMLStencilElement {
    }
    var HTMLOecAppLauncherElement: {
        prototype: HTMLOecAppLauncherElement;
        new (): HTMLOecAppLauncherElement;
    };
    interface HTMLOecButtonElement extends Components.OecButton, HTMLStencilElement {
    }
    var HTMLOecButtonElement: {
        prototype: HTMLOecButtonElement;
        new (): HTMLOecButtonElement;
    };
    interface HTMLOecHeaderElement extends Components.OecHeader, HTMLStencilElement {
    }
    var HTMLOecHeaderElement: {
        prototype: HTMLOecHeaderElement;
        new (): HTMLOecHeaderElement;
    };
    interface HTMLOecModalElement extends Components.OecModal, HTMLStencilElement {
    }
    var HTMLOecModalElement: {
        prototype: HTMLOecModalElement;
        new (): HTMLOecModalElement;
    };
    interface HTMLOecNavElement extends Components.OecNav, HTMLStencilElement {
    }
    var HTMLOecNavElement: {
        prototype: HTMLOecNavElement;
        new (): HTMLOecNavElement;
    };
    interface HTMLOecNavMenuActionElement extends Components.OecNavMenuAction, HTMLStencilElement {
    }
    var HTMLOecNavMenuActionElement: {
        prototype: HTMLOecNavMenuActionElement;
        new (): HTMLOecNavMenuActionElement;
    };
    interface HTMLOecNavSearchElement extends Components.OecNavSearch, HTMLStencilElement {
    }
    var HTMLOecNavSearchElement: {
        prototype: HTMLOecNavSearchElement;
        new (): HTMLOecNavSearchElement;
    };
    interface HTMLOecOverlayArrowElement extends Components.OecOverlayArrow, HTMLStencilElement {
    }
    var HTMLOecOverlayArrowElement: {
        prototype: HTMLOecOverlayArrowElement;
        new (): HTMLOecOverlayArrowElement;
    };
    interface HTMLOecOverlayBackdropElement extends Components.OecOverlayBackdrop, HTMLStencilElement {
    }
    var HTMLOecOverlayBackdropElement: {
        prototype: HTMLOecOverlayBackdropElement;
        new (): HTMLOecOverlayBackdropElement;
    };
    interface HTMLOecOverlayContainerElement extends Components.OecOverlayContainer, HTMLStencilElement {
    }
    var HTMLOecOverlayContainerElement: {
        prototype: HTMLOecOverlayContainerElement;
        new (): HTMLOecOverlayContainerElement;
    };
    interface HTMLOecOverlayContentElement extends Components.OecOverlayContent, HTMLStencilElement {
    }
    var HTMLOecOverlayContentElement: {
        prototype: HTMLOecOverlayContentElement;
        new (): HTMLOecOverlayContentElement;
    };
    interface HTMLOecOverlayItemElement extends Components.OecOverlayItem, HTMLStencilElement {
    }
    var HTMLOecOverlayItemElement: {
        prototype: HTMLOecOverlayItemElement;
        new (): HTMLOecOverlayItemElement;
    };
    interface HTMLOecOverlayPaneElement extends Components.OecOverlayPane, HTMLStencilElement {
    }
    var HTMLOecOverlayPaneElement: {
        prototype: HTMLOecOverlayPaneElement;
        new (): HTMLOecOverlayPaneElement;
    };
    interface HTMLOecUserIconElement extends Components.OecUserIcon, HTMLStencilElement {
    }
    var HTMLOecUserIconElement: {
        prototype: HTMLOecUserIconElement;
        new (): HTMLOecUserIconElement;
    };
    interface HTMLElementTagNameMap {
        "oec-app-card": HTMLOecAppCardElement;
        "oec-app-launcher": HTMLOecAppLauncherElement;
        "oec-button": HTMLOecButtonElement;
        "oec-header": HTMLOecHeaderElement;
        "oec-modal": HTMLOecModalElement;
        "oec-nav": HTMLOecNavElement;
        "oec-nav-menu-action": HTMLOecNavMenuActionElement;
        "oec-nav-search": HTMLOecNavSearchElement;
        "oec-overlay-arrow": HTMLOecOverlayArrowElement;
        "oec-overlay-backdrop": HTMLOecOverlayBackdropElement;
        "oec-overlay-container": HTMLOecOverlayContainerElement;
        "oec-overlay-content": HTMLOecOverlayContentElement;
        "oec-overlay-item": HTMLOecOverlayItemElement;
        "oec-overlay-pane": HTMLOecOverlayPaneElement;
        "oec-user-icon": HTMLOecUserIconElement;
    }
}
declare namespace LocalJSX {
    interface OecAppCard {
        "appDefinition"?: AppDefinition;
    }
    interface OecAppLauncher {
        "enabledApps"?: string[];
        "onAppCardClicked"?: (event: OecAppLauncherCustomEvent<string>) => void;
    }
    interface OecButton {
        /**
          * This value sets whether the button should be disabled or not
         */
        "disabled"?: boolean;
        /**
          * The type of button to display. Possible values are: primary, secondary, or tertiary
         */
        "type"?: string;
    }
    interface OecHeader {
        /**
          * The type of header to display. Possible values are 1-6
         */
        "level"?: number;
    }
    interface OecModal {
        /**
          * Communicate to parent component that the modal has been closed
         */
        "onClose"?: (event: OecModalCustomEvent<boolean>) => void;
        /**
          * The size of modal to display. Possible values are small, medium, or large
         */
        "size"?: string;
        /**
          * The type of header to display. Possible values are modal or dialog
         */
        "type"?: string;
        /**
          * Toggle the visibility of the modal
         */
        "visible"?: boolean;
    }
    interface OecNav {
        "enabledApps"?: string[];
        "onBentoClicked"?: (event: OecNavCustomEvent<void>) => void;
        "onHelpClicked"?: (event: OecNavCustomEvent<void>) => void;
        "onMessagesClicked"?: (event: OecNavCustomEvent<void>) => void;
        "onNotificationsClicked"?: (event: OecNavCustomEvent<void>) => void;
        "userId"?: string;
    }
    interface OecNavMenuAction {
        "badgeTotal"?: number;
        "isClickable"?: boolean;
    }
    interface OecNavSearch {
        "onSearch"?: (event: OecNavSearchCustomEvent<string>) => void;
    }
    interface OecOverlayArrow {
        "overlayConfig": OverlayConfig;
    }
    interface OecOverlayBackdrop {
        "hide"?: () => Promise<void>;
        "isShowing"?: () => Promise<boolean>;
        "overlayConfig": OverlayConfig;
    }
    interface OecOverlayContainer {
    }
    interface OecOverlayContent {
        "hide"?: () => Promise<void>;
        "overlayConfig": OverlayConfig;
    }
    interface OecOverlayItem {
        "onClosed"?: (event: OecOverlayItemCustomEvent<void>) => void;
        "overlayConfig": OverlayConfig;
    }
    interface OecOverlayPane {
        "hide"?: () => Promise<void>;
        "overlayConfig": OverlayConfig;
    }
    interface OecUserIcon {
        "userId"?: string;
    }
    interface IntrinsicElements {
        "oec-app-card": OecAppCard;
        "oec-app-launcher": OecAppLauncher;
        "oec-button": OecButton;
        "oec-header": OecHeader;
        "oec-modal": OecModal;
        "oec-nav": OecNav;
        "oec-nav-menu-action": OecNavMenuAction;
        "oec-nav-search": OecNavSearch;
        "oec-overlay-arrow": OecOverlayArrow;
        "oec-overlay-backdrop": OecOverlayBackdrop;
        "oec-overlay-container": OecOverlayContainer;
        "oec-overlay-content": OecOverlayContent;
        "oec-overlay-item": OecOverlayItem;
        "oec-overlay-pane": OecOverlayPane;
        "oec-user-icon": OecUserIcon;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "oec-app-card": LocalJSX.OecAppCard & JSXBase.HTMLAttributes<HTMLOecAppCardElement>;
            "oec-app-launcher": LocalJSX.OecAppLauncher & JSXBase.HTMLAttributes<HTMLOecAppLauncherElement>;
            "oec-button": LocalJSX.OecButton & JSXBase.HTMLAttributes<HTMLOecButtonElement>;
            "oec-header": LocalJSX.OecHeader & JSXBase.HTMLAttributes<HTMLOecHeaderElement>;
            "oec-modal": LocalJSX.OecModal & JSXBase.HTMLAttributes<HTMLOecModalElement>;
            "oec-nav": LocalJSX.OecNav & JSXBase.HTMLAttributes<HTMLOecNavElement>;
            "oec-nav-menu-action": LocalJSX.OecNavMenuAction & JSXBase.HTMLAttributes<HTMLOecNavMenuActionElement>;
            "oec-nav-search": LocalJSX.OecNavSearch & JSXBase.HTMLAttributes<HTMLOecNavSearchElement>;
            "oec-overlay-arrow": LocalJSX.OecOverlayArrow & JSXBase.HTMLAttributes<HTMLOecOverlayArrowElement>;
            "oec-overlay-backdrop": LocalJSX.OecOverlayBackdrop & JSXBase.HTMLAttributes<HTMLOecOverlayBackdropElement>;
            "oec-overlay-container": LocalJSX.OecOverlayContainer & JSXBase.HTMLAttributes<HTMLOecOverlayContainerElement>;
            "oec-overlay-content": LocalJSX.OecOverlayContent & JSXBase.HTMLAttributes<HTMLOecOverlayContentElement>;
            "oec-overlay-item": LocalJSX.OecOverlayItem & JSXBase.HTMLAttributes<HTMLOecOverlayItemElement>;
            "oec-overlay-pane": LocalJSX.OecOverlayPane & JSXBase.HTMLAttributes<HTMLOecOverlayPaneElement>;
            "oec-user-icon": LocalJSX.OecUserIcon & JSXBase.HTMLAttributes<HTMLOecUserIconElement>;
        }
    }
}
